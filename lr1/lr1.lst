     1                                  %include "stud_io.inc"
     2                              <1> ;; File stud_io.inc for Linux O.S.
     3                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     4                              <1> ;; I, the author, hereby grant everyone the right to use this
     5                              <1> ;; file for any purpose, in any manner, in it's original or
     6                              <1> ;; modified form, provided that any modified versions are
     7                              <1> ;; clearly marked as such.
     8                              <1> 
     9                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    10                              <1> ;; system dependend part
    11                              <1> 
    12                              <1> ; generic 3-param syscall
    13                              <1> %macro _syscall_3 4
    14                              <1> 	push edx
    15                              <1> 	push ecx
    16                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    17                              <1> 	push %1
    18                              <1> 	push %2
    19                              <1> 	push %3
    20                              <1> 	push %4
    21                              <1> 	pop edx
    22                              <1> 	pop ecx
    23                              <1> 	pop ebx
    24                              <1> 	pop eax 
    25                              <1> 	int 0x80
    26                              <1> 	pop ebx
    27                              <1> 	pop ecx
    28                              <1> 	pop edx
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    32                              <1> %macro _syscall_exit 1
    33                              <1> 	mov ebx, %1	; exit code
    34                              <1> 	mov eax, 1	; 1 = sys_exit
    35                              <1> 	int 0x80
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;; system dependent part ends here
    39                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    40                              <1> 
    41                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    42                              <1> ; output: eax: read bytes
    43                              <1> %macro _syscall_read 3
    44                              <1> 	_syscall_3 3,%1,%2,%3
    45                              <1> %endmacro
    46                              <1> 
    47                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    48                              <1> ; output: eax: written bytes
    49                              <1> %macro _syscall_write 3
    50                              <1> 	_syscall_3 4,%1,%2,%3
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    54                              <1> %macro 	PRINT 1
    55                              <1> 	pusha
    56                              <1> 	pushf
    57                              <1> 	jmp %%astr
    58                              <1> %%str	db	%1, 0
    59                              <1> %%strln	equ	$-%%str
    60                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    61                              <1> 	popf
    62                              <1> 	popa
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    66                              <1> %macro	PUTCHAR 1
    67                              <1> 	pusha
    68                              <1> 	pushf
    69                              <1> %ifstr %1
    70                              <1> 	mov	al, %1
    71                              <1> %elifnum %1
    72                              <1> 	mov	al, %1
    73                              <1> %elifidni %1,al
    74                              <1> 	nop
    75                              <1> %elifidni %1,ah
    76                              <1> 	mov	al, ah
    77                              <1> %elifidni %1,bl
    78                              <1> 	mov	al, bl
    79                              <1> %elifidni %1,bh
    80                              <1> 	mov	al, bh
    81                              <1> %elifidni %1,cl
    82                              <1> 	mov	al, cl
    83                              <1> %elifidni %1,ch
    84                              <1> 	mov	al, ch
    85                              <1> %elifidni %1,dl
    86                              <1> 	mov	al, dl
    87                              <1> %elifidni %1,dh
    88                              <1> 	mov	al, dh
    89                              <1> %else
    90                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    91                              <1> %endif
    92                              <1> 	sub	esp, 2  ; reserve memory for buffer
    93                              <1> 	mov	edi, esp
    94                              <1> 	mov	[edi], al
    95                              <1> 	_syscall_write 1, edi, 1
    96                              <1> 	add	esp, 2
    97                              <1> 	popf
    98                              <1> 	popa
    99                              <1> %endmacro
   100                              <1> 
   101                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   102                              <1> %macro	GETCHAR 0
   103                              <1> 	pushf
   104                              <1> 	push	edi
   105                              <1> 	sub	esp, 2
   106                              <1> 	mov	edi, esp
   107                              <1> 	_syscall_read 0, edi, 1
   108                              <1> 	cmp	eax, 1
   109                              <1> 	jne	%%eof_reached
   110                              <1> 	xor	eax,eax
   111                              <1> 	mov	al, [edi]
   112                              <1> 	jmp	%%gcquit
   113                              <1> %%eof_reached:
   114                              <1> 	xor	eax, eax
   115                              <1> 	not	eax 		; eax := -1
   116                              <1> %%gcquit:
   117                              <1> 	add	esp, 2
   118                              <1> 	pop	edi
   119                              <1> 	popf
   120                              <1> %endmacro
   121                              <1> 
   122                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                              <1> %macro FINISH 0-1 0
   124                              <1> 	_syscall_exit %1
   125                              <1> %endmacro
   126                                  global _start;
   127                                  
   128                                  section .text;
   129                                  _start:
   130 00000000 BA00000000              	mov edx, 0;
   131 00000005 B90A000000              	mov ecx, 10;
   132 0000000A BB00000000              	mov ebx, 0;
   133 0000000F B800000000              	mov eax, 0;
   134                                  _mark:
   135                                  	GETCHAR;
   136 00000014 9C                  <1>  pushf
   137 00000015 57                  <1>  push edi
   138 00000016 83EC02              <1>  sub esp, 2
   139 00000019 89E7                <1>  mov edi, esp
   140                              <1>  _syscall_read 0, edi, 1
   141                              <2>  _syscall_3 3,%1,%2,%3
   142 0000001B 52                  <3>  push edx
   143 0000001C 51                  <3>  push ecx
   144 0000001D 53                  <3>  push ebx
   145 0000001E 6A03                <3>  push %1
   146 00000020 6A00                <3>  push %2
   147 00000022 57                  <3>  push %3
   148 00000023 6A01                <3>  push %4
   149 00000025 5A                  <3>  pop edx
   150 00000026 59                  <3>  pop ecx
   151 00000027 5B                  <3>  pop ebx
   152 00000028 58                  <3>  pop eax
   153 00000029 CD80                <3>  int 0x80
   154 0000002B 5B                  <3>  pop ebx
   155 0000002C 59                  <3>  pop ecx
   156 0000002D 5A                  <3>  pop edx
   157 0000002E 83F801              <1>  cmp eax, 1
   158 00000031 7506                <1>  jne %%eof_reached
   159 00000033 31C0                <1>  xor eax,eax
   160 00000035 8A07                <1>  mov al, [edi]
   161 00000037 EB04                <1>  jmp %%gcquit
   162                              <1> %%eof_reached:
   163 00000039 31C0                <1>  xor eax, eax
   164 0000003B F7D0                <1>  not eax
   165                              <1> %%gcquit:
   166 0000003D 83C402              <1>  add esp, 2
   167 00000040 5F                  <1>  pop edi
   168 00000041 9D                  <1>  popf
   169 00000042 89C3                    	mov ebx, eax;
   170 00000044 83FB30                  	cmp ebx, '0';
   171 00000047 7C12                    	jl _print;
   172 00000049 83FB39                  	cmp ebx, '9';
   173 0000004C 7F0D                    	jg _print;
   174 0000004E 83EB30                  	sub ebx, '0';
   175 00000051 89D0                    	mov eax, edx;
   176 00000053 F7E1                    	mul ecx;
   177 00000055 89C2                    	mov edx, eax;
   178 00000057 01DA                    	add edx, ebx;
   179 00000059 EBB9                    jmp _mark;
   180                                  	
   181                                  _print:
   182 0000005B 83FA00                  	cmp edx, 0;
   183 0000005E 7426                    	jz _end;
   184 00000060 4A                      	dec(edx);
   185                                  	PUTCHAR 42;
   186 00000061 60                  <1>  pusha
   187 00000062 9C                  <1>  pushf
   188                              <1> %ifstr %1
   189                              <1>  mov al, %1
   190                              <1> %elifnum %1
   191 00000063 B02A                <1>  mov al, %1
   192                              <1> %elifidni %1,al
   193                              <1>  nop
   194                              <1> %elifidni %1,ah
   195                              <1>  mov al, ah
   196                              <1> %elifidni %1,bl
   197                              <1>  mov al, bl
   198                              <1> %elifidni %1,bh
   199                              <1>  mov al, bh
   200                              <1> %elifidni %1,cl
   201                              <1>  mov al, cl
   202                              <1> %elifidni %1,ch
   203                              <1>  mov al, ch
   204                              <1> %elifidni %1,dl
   205                              <1>  mov al, dl
   206                              <1> %elifidni %1,dh
   207                              <1>  mov al, dh
   208                              <1> %else
   209                              <1>  mov al, %1
   210                              <1> %endif
   211 00000065 83EC02              <1>  sub esp, 2
   212 00000068 89E7                <1>  mov edi, esp
   213 0000006A 8807                <1>  mov [edi], al
   214                              <1>  _syscall_write 1, edi, 1
   215                              <2>  _syscall_3 4,%1,%2,%3
   216 0000006C 52                  <3>  push edx
   217 0000006D 51                  <3>  push ecx
   218 0000006E 53                  <3>  push ebx
   219 0000006F 6A04                <3>  push %1
   220 00000071 6A01                <3>  push %2
   221 00000073 57                  <3>  push %3
   222 00000074 6A01                <3>  push %4
   223 00000076 5A                  <3>  pop edx
   224 00000077 59                  <3>  pop ecx
   225 00000078 5B                  <3>  pop ebx
   226 00000079 58                  <3>  pop eax
   227 0000007A CD80                <3>  int 0x80
   228 0000007C 5B                  <3>  pop ebx
   229 0000007D 59                  <3>  pop ecx
   230 0000007E 5A                  <3>  pop edx
   231 0000007F 83C402              <1>  add esp, 2
   232 00000082 9D                  <1>  popf
   233 00000083 61                  <1>  popa
   234 00000084 EBD5                    	jmp _print;
   235                                  _end:
   236                                  	PUTCHAR 10;
   237 00000086 60                  <1>  pusha
   238 00000087 9C                  <1>  pushf
   239                              <1> %ifstr %1
   240                              <1>  mov al, %1
   241                              <1> %elifnum %1
   242 00000088 B00A                <1>  mov al, %1
   243                              <1> %elifidni %1,al
   244                              <1>  nop
   245                              <1> %elifidni %1,ah
   246                              <1>  mov al, ah
   247                              <1> %elifidni %1,bl
   248                              <1>  mov al, bl
   249                              <1> %elifidni %1,bh
   250                              <1>  mov al, bh
   251                              <1> %elifidni %1,cl
   252                              <1>  mov al, cl
   253                              <1> %elifidni %1,ch
   254                              <1>  mov al, ch
   255                              <1> %elifidni %1,dl
   256                              <1>  mov al, dl
   257                              <1> %elifidni %1,dh
   258                              <1>  mov al, dh
   259                              <1> %else
   260                              <1>  mov al, %1
   261                              <1> %endif
   262 0000008A 83EC02              <1>  sub esp, 2
   263 0000008D 89E7                <1>  mov edi, esp
   264 0000008F 8807                <1>  mov [edi], al
   265                              <1>  _syscall_write 1, edi, 1
   266                              <2>  _syscall_3 4,%1,%2,%3
   267 00000091 52                  <3>  push edx
   268 00000092 51                  <3>  push ecx
   269 00000093 53                  <3>  push ebx
   270 00000094 6A04                <3>  push %1
   271 00000096 6A01                <3>  push %2
   272 00000098 57                  <3>  push %3
   273 00000099 6A01                <3>  push %4
   274 0000009B 5A                  <3>  pop edx
   275 0000009C 59                  <3>  pop ecx
   276 0000009D 5B                  <3>  pop ebx
   277 0000009E 58                  <3>  pop eax
   278 0000009F CD80                <3>  int 0x80
   279 000000A1 5B                  <3>  pop ebx
   280 000000A2 59                  <3>  pop ecx
   281 000000A3 5A                  <3>  pop edx
   282 000000A4 83C402              <1>  add esp, 2
   283 000000A7 9D                  <1>  popf
   284 000000A8 61                  <1>  popa
   285                                  	FINISH;
   286                              <1>  _syscall_exit %1
   287 000000A9 BB00000000          <2>  mov ebx, %1
   288 000000AE B801000000          <2>  mov eax, 1
   289 000000B3 CD80                <2>  int 0x80
