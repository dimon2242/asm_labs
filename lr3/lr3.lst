     1                                  %include "stud_io.inc"
     2                              <1> ;; File stud_io.inc for Linux O.S.
     3                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     4                              <1> ;; I, the author, hereby grant everyone the right to use this
     5                              <1> ;; file for any purpose, in any manner, in it's original or
     6                              <1> ;; modified form, provided that any modified versions are
     7                              <1> ;; clearly marked as such.
     8                              <1> 
     9                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    10                              <1> ;; system dependend part
    11                              <1> 
    12                              <1> ; generic 3-param syscall
    13                              <1> %macro _syscall_3 4
    14                              <1> 	push edx
    15                              <1> 	push ecx
    16                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    17                              <1> 	push %1
    18                              <1> 	push %2
    19                              <1> 	push %3
    20                              <1> 	push %4
    21                              <1> 	pop edx
    22                              <1> 	pop ecx
    23                              <1> 	pop ebx
    24                              <1> 	pop eax 
    25                              <1> 	int 0x80
    26                              <1> 	pop ebx
    27                              <1> 	pop ecx
    28                              <1> 	pop edx
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    32                              <1> %macro _syscall_exit 1
    33                              <1> 	mov ebx, %1	; exit code
    34                              <1> 	mov eax, 1	; 1 = sys_exit
    35                              <1> 	int 0x80
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;; system dependent part ends here
    39                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    40                              <1> 
    41                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    42                              <1> ; output: eax: read bytes
    43                              <1> %macro _syscall_read 3
    44                              <1> 	_syscall_3 3,%1,%2,%3
    45                              <1> %endmacro
    46                              <1> 
    47                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    48                              <1> ; output: eax: written bytes
    49                              <1> %macro _syscall_write 3
    50                              <1> 	_syscall_3 4,%1,%2,%3
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    54                              <1> %macro 	PRINT 1
    55                              <1> 	pusha
    56                              <1> 	pushf
    57                              <1> 	jmp %%astr
    58                              <1> %%str	db	%1, 0
    59                              <1> %%strln	equ	$-%%str
    60                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    61                              <1> 	popf
    62                              <1> 	popa
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    66                              <1> %macro	PUTCHAR 1
    67                              <1> 	pusha
    68                              <1> 	pushf
    69                              <1> %ifstr %1
    70                              <1> 	mov	al, %1
    71                              <1> %elifnum %1
    72                              <1> 	mov	al, %1
    73                              <1> %elifidni %1,al
    74                              <1> 	nop
    75                              <1> %elifidni %1,ah
    76                              <1> 	mov	al, ah
    77                              <1> %elifidni %1,bl
    78                              <1> 	mov	al, bl
    79                              <1> %elifidni %1,bh
    80                              <1> 	mov	al, bh
    81                              <1> %elifidni %1,cl
    82                              <1> 	mov	al, cl
    83                              <1> %elifidni %1,ch
    84                              <1> 	mov	al, ch
    85                              <1> %elifidni %1,dl
    86                              <1> 	mov	al, dl
    87                              <1> %elifidni %1,dh
    88                              <1> 	mov	al, dh
    89                              <1> %else
    90                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    91                              <1> %endif
    92                              <1> 	sub	esp, 2  ; reserve memory for buffer
    93                              <1> 	mov	edi, esp
    94                              <1> 	mov	[edi], al
    95                              <1> 	_syscall_write 1, edi, 1
    96                              <1> 	add	esp, 2
    97                              <1> 	popf
    98                              <1> 	popa
    99                              <1> %endmacro
   100                              <1> 
   101                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   102                              <1> %macro	GETCHAR 0
   103                              <1> 	pushf
   104                              <1> 	push	edi
   105                              <1> 	sub	esp, 2
   106                              <1> 	mov	edi, esp
   107                              <1> 	_syscall_read 0, edi, 1
   108                              <1> 	cmp	eax, 1
   109                              <1> 	jne	%%eof_reached
   110                              <1> 	xor	eax,eax
   111                              <1> 	mov	al, [edi]
   112                              <1> 	jmp	%%gcquit
   113                              <1> %%eof_reached:
   114                              <1> 	xor	eax, eax
   115                              <1> 	not	eax 		; eax := -1
   116                              <1> %%gcquit:
   117                              <1> 	add	esp, 2
   118                              <1> 	pop	edi
   119                              <1> 	popf
   120                              <1> %endmacro
   121                              <1> 
   122                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                              <1> %macro FINISH 0-1 0
   124                              <1> 	_syscall_exit %1
   125                              <1> %endmacro
   126                                  global _start
   127                                  
   128                                  section .text
   129                                  _start:
   130                                  	
   131 00000000 E817000000              	call inputNumber
   132 00000005 89C6                    	mov esi, eax
   133 00000007 E810000000              	call inputNumber
   134 0000000C 01F0                    	add eax, esi
   135 0000000E 50                      	push eax
   136 0000000F E8AA000000              	call outputNumber
   137 00000014 83C404                  	add esp, 4
   138 00000017 E9F8000000              	jmp _end
   139                                  	
   140                                  inputNumber:
   141 0000001C 55                      	push ebp
   142 0000001D 89E5                    	mov ebp, esp
   143 0000001F 83EC04                  	sub esp, 4
   144                                  
   145 00000022 53                      	push ebx
   146 00000023 51                      	push ecx
   147 00000024 52                      	push edx
   148 00000025 9C                      	pushfd
   149                                  
   150 00000026 BA00000000              	mov edx, 0
   151 0000002B B90A000000              	mov ecx, 10
   152 00000030 BB00000000              	mov ebx, 0
   153 00000035 B800000000              	mov eax, 0
   154                                  
   155                                  .while:
   156                                  	GETCHAR
   157 0000003A 9C                  <1>  pushf
   158 0000003B 57                  <1>  push edi
   159 0000003C 83EC02              <1>  sub esp, 2
   160 0000003F 89E7                <1>  mov edi, esp
   161                              <1>  _syscall_read 0, edi, 1
   162                              <2>  _syscall_3 3,%1,%2,%3
   163 00000041 52                  <3>  push edx
   164 00000042 51                  <3>  push ecx
   165 00000043 53                  <3>  push ebx
   166 00000044 6A03                <3>  push %1
   167 00000046 6A00                <3>  push %2
   168 00000048 57                  <3>  push %3
   169 00000049 6A01                <3>  push %4
   170 0000004B 5A                  <3>  pop edx
   171 0000004C 59                  <3>  pop ecx
   172 0000004D 5B                  <3>  pop ebx
   173 0000004E 58                  <3>  pop eax
   174 0000004F CD80                <3>  int 0x80
   175 00000051 5B                  <3>  pop ebx
   176 00000052 59                  <3>  pop ecx
   177 00000053 5A                  <3>  pop edx
   178 00000054 83F801              <1>  cmp eax, 1
   179 00000057 7506                <1>  jne %%eof_reached
   180 00000059 31C0                <1>  xor eax,eax
   181 0000005B 8A07                <1>  mov al, [edi]
   182 0000005D EB04                <1>  jmp %%gcquit
   183                              <1> %%eof_reached:
   184 0000005F 31C0                <1>  xor eax, eax
   185 00000061 F7D0                <1>  not eax
   186                              <1> %%gcquit:
   187 00000063 83C402              <1>  add esp, 2
   188 00000066 5F                  <1>  pop edi
   189 00000067 9D                  <1>  popf
   190 00000068 83F80A                  	cmp eax, 10
   191 0000006B 7421                    	je .return
   192 0000006D 83F820                  	cmp eax, " "
   193 00000070 741C                    	je .return
   194 00000072 83F830                  	cmp eax, '0'
   195 00000075 7C22                    	jl .err
   196 00000077 83F839                  	cmp eax, '9'
   197 0000007A 7F1D                    	jg .err
   198 0000007C 89C3                    	mov ebx, eax
   199 0000007E 83EB30                  	sub ebx, '0'
   200 00000081 89D0                    	mov eax, edx
   201 00000083 F7E1                    	mul ecx
   202 00000085 89C2                    	mov edx, eax
   203 00000087 01DA                    	add edx, ebx
   204 00000089 8955FC                  	mov [ebp-4], edx
   205 0000008C EBAC                    	jmp .while
   206                                  .return:
   207 0000008E 8B45FC                  	mov eax, [ebp-4]
   208                                  
   209 00000091 9D                      	popfd
   210 00000092 5A                      	pop edx
   211 00000093 59                      	pop ecx
   212 00000094 5B                      	pop ebx
   213                                  
   214 00000095 89EC                    	mov esp, ebp
   215 00000097 5D                      	pop ebp
   216 00000098 C3                      	ret
   217                                  	
   218                                  .err:
   219                                  	PRINT "ERROR"
   220 00000099 60                  <1>  pusha
   221 0000009A 9C                  <1>  pushf
   222 0000009B EB06                <1>  jmp %%astr
   223 0000009D 4552524F5200        <1> %%str db %1, 0
   224                              <1> %%strln equ $-%%str
   225                              <1> %%astr: _syscall_write 1, %%str, %%strln
   226                              <2> ..@5.astr: 
   227                              <2>  _syscall_3 4,%1,%2,%3
   228 000000A3 52                  <3>  push edx
   229 000000A4 51                  <3>  push ecx
   230 000000A5 53                  <3>  push ebx
   231 000000A6 6A04                <3>  push %1
   232 000000A8 6A01                <3>  push %2
   233 000000AA 68[9D000000]        <3>  push %3
   234 000000AF 6A06                <3>  push %4
   235 000000B1 5A                  <3>  pop edx
   236 000000B2 59                  <3>  pop ecx
   237 000000B3 5B                  <3>  pop ebx
   238 000000B4 58                  <3>  pop eax
   239 000000B5 CD80                <3>  int 0x80
   240 000000B7 5B                  <3>  pop ebx
   241 000000B8 59                  <3>  pop ecx
   242 000000B9 5A                  <3>  pop edx
   243 000000BA 9D                  <1>  popf
   244 000000BB 61                  <1>  popa
   245 000000BC EB56                    	jmp _end
   246                                  
   247                                  outputNumber:
   248 000000BE 55                      	push ebp
   249 000000BF 89E5                    	mov ebp, esp
   250 000000C1 83EC08                  	sub esp, 8
   251                                  
   252 000000C4 60                      	pushad
   253 000000C5 9C                      	pushfd
   254                                  
   255 000000C6 B90A000000              	mov ecx, 10
   256                                  
   257 000000CB 8B4508                  	mov eax, [ebp+8]
   258 000000CE 89EE                    	mov esi, ebp
   259                                  
   260                                  .while:
   261 000000D0 BA00000000              	mov edx, 0
   262 000000D5 F7F1                    	div ecx
   263 000000D7 4E                      	dec esi
   264 000000D8 8816                    	mov [esi], dl
   265 000000DA 83F800                  	cmp eax, 0
   266 000000DD 7402                    	je .print
   267                                  	
   268 000000DF EBEF                    	jmp .while
   269                                  
   270                                  .print:
   271 000000E1 39EE                    	cmp esi, ebp
   272 000000E3 7429                    	je .return
   273 000000E5 800630                  	add [esi], byte '0'
   274                                  	PUTCHAR byte [esi]
   275 000000E8 60                  <1>  pusha
   276 000000E9 9C                  <1>  pushf
   277                              <1> %ifstr %1
   278                              <1>  mov al, %1
   279                              <1> %elifnum %1
   280                              <1>  mov al, %1
   281                              <1> %elifidni %1,al
   282                              <1>  nop
   283                              <1> %elifidni %1,ah
   284                              <1>  mov al, ah
   285                              <1> %elifidni %1,bl
   286                              <1>  mov al, bl
   287                              <1> %elifidni %1,bh
   288                              <1>  mov al, bh
   289                              <1> %elifidni %1,cl
   290                              <1>  mov al, cl
   291                              <1> %elifidni %1,ch
   292                              <1>  mov al, ch
   293                              <1> %elifidni %1,dl
   294                              <1>  mov al, dl
   295                              <1> %elifidni %1,dh
   296                              <1>  mov al, dh
   297                              <1> %else
   298 000000EA 8A06                <1>  mov al, %1
   299                              <1> %endif
   300 000000EC 83EC02              <1>  sub esp, 2
   301 000000EF 89E7                <1>  mov edi, esp
   302 000000F1 8807                <1>  mov [edi], al
   303                              <1>  _syscall_write 1, edi, 1
   304                              <2>  _syscall_3 4,%1,%2,%3
   305 000000F3 52                  <3>  push edx
   306 000000F4 51                  <3>  push ecx
   307 000000F5 53                  <3>  push ebx
   308 000000F6 6A04                <3>  push %1
   309 000000F8 6A01                <3>  push %2
   310 000000FA 57                  <3>  push %3
   311 000000FB 6A01                <3>  push %4
   312 000000FD 5A                  <3>  pop edx
   313 000000FE 59                  <3>  pop ecx
   314 000000FF 5B                  <3>  pop ebx
   315 00000100 58                  <3>  pop eax
   316 00000101 CD80                <3>  int 0x80
   317 00000103 5B                  <3>  pop ebx
   318 00000104 59                  <3>  pop ecx
   319 00000105 5A                  <3>  pop edx
   320 00000106 83C402              <1>  add esp, 2
   321 00000109 9D                  <1>  popf
   322 0000010A 61                  <1>  popa
   323 0000010B 46                      	inc esi
   324 0000010C EBD3                    	jmp .print
   325                                  
   326                                  .return:
   327 0000010E 9D                      	popfd
   328 0000010F 61                      	popad
   329                                  
   330 00000110 89EC                    	mov esp, ebp
   331 00000112 5D                      	pop ebp
   332 00000113 C3                      	ret
   333                                  
   334                                  _end:
   335                                  	PUTCHAR 10
   336 00000114 60                  <1>  pusha
   337 00000115 9C                  <1>  pushf
   338                              <1> %ifstr %1
   339                              <1>  mov al, %1
   340                              <1> %elifnum %1
   341 00000116 B00A                <1>  mov al, %1
   342                              <1> %elifidni %1,al
   343                              <1>  nop
   344                              <1> %elifidni %1,ah
   345                              <1>  mov al, ah
   346                              <1> %elifidni %1,bl
   347                              <1>  mov al, bl
   348                              <1> %elifidni %1,bh
   349                              <1>  mov al, bh
   350                              <1> %elifidni %1,cl
   351                              <1>  mov al, cl
   352                              <1> %elifidni %1,ch
   353                              <1>  mov al, ch
   354                              <1> %elifidni %1,dl
   355                              <1>  mov al, dl
   356                              <1> %elifidni %1,dh
   357                              <1>  mov al, dh
   358                              <1> %else
   359                              <1>  mov al, %1
   360                              <1> %endif
   361 00000118 83EC02              <1>  sub esp, 2
   362 0000011B 89E7                <1>  mov edi, esp
   363 0000011D 8807                <1>  mov [edi], al
   364                              <1>  _syscall_write 1, edi, 1
   365                              <2>  _syscall_3 4,%1,%2,%3
   366 0000011F 52                  <3>  push edx
   367 00000120 51                  <3>  push ecx
   368 00000121 53                  <3>  push ebx
   369 00000122 6A04                <3>  push %1
   370 00000124 6A01                <3>  push %2
   371 00000126 57                  <3>  push %3
   372 00000127 6A01                <3>  push %4
   373 00000129 5A                  <3>  pop edx
   374 0000012A 59                  <3>  pop ecx
   375 0000012B 5B                  <3>  pop ebx
   376 0000012C 58                  <3>  pop eax
   377 0000012D CD80                <3>  int 0x80
   378 0000012F 5B                  <3>  pop ebx
   379 00000130 59                  <3>  pop ecx
   380 00000131 5A                  <3>  pop edx
   381 00000132 83C402              <1>  add esp, 2
   382 00000135 9D                  <1>  popf
   383 00000136 61                  <1>  popa
   384                                  	FINISH
   385                              <1>  _syscall_exit %1
   386 00000137 BB00000000          <2>  mov ebx, %1
   387 0000013C B801000000          <2>  mov eax, 1
   388 00000141 CD80                <2>  int 0x80
