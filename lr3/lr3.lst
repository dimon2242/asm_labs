     1                                  %include "stud_io.inc"
     2                              <1> ;; File stud_io.inc for Linux O.S.
     3                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     4                              <1> ;; I, the author, hereby grant everyone the right to use this
     5                              <1> ;; file for any purpose, in any manner, in it's original or
     6                              <1> ;; modified form, provided that any modified versions are
     7                              <1> ;; clearly marked as such.
     8                              <1> 
     9                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    10                              <1> ;; system dependend part
    11                              <1> 
    12                              <1> ; generic 3-param syscall
    13                              <1> %macro _syscall_3 4
    14                              <1> 	push edx
    15                              <1> 	push ecx
    16                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    17                              <1> 	push %1
    18                              <1> 	push %2
    19                              <1> 	push %3
    20                              <1> 	push %4
    21                              <1> 	pop edx
    22                              <1> 	pop ecx
    23                              <1> 	pop ebx
    24                              <1> 	pop eax 
    25                              <1> 	int 0x80
    26                              <1> 	pop ebx
    27                              <1> 	pop ecx
    28                              <1> 	pop edx
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    32                              <1> %macro _syscall_exit 1
    33                              <1> 	mov ebx, %1	; exit code
    34                              <1> 	mov eax, 1	; 1 = sys_exit
    35                              <1> 	int 0x80
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;; system dependent part ends here
    39                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    40                              <1> 
    41                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    42                              <1> ; output: eax: read bytes
    43                              <1> %macro _syscall_read 3
    44                              <1> 	_syscall_3 3,%1,%2,%3
    45                              <1> %endmacro
    46                              <1> 
    47                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    48                              <1> ; output: eax: written bytes
    49                              <1> %macro _syscall_write 3
    50                              <1> 	_syscall_3 4,%1,%2,%3
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    54                              <1> %macro 	PRINT 1
    55                              <1> 	pusha
    56                              <1> 	pushf
    57                              <1> 	jmp %%astr
    58                              <1> %%str	db	%1, 0
    59                              <1> %%strln	equ	$-%%str
    60                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    61                              <1> 	popf
    62                              <1> 	popa
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    66                              <1> %macro	PUTCHAR 1
    67                              <1> 	pusha
    68                              <1> 	pushf
    69                              <1> %ifstr %1
    70                              <1> 	mov	al, %1
    71                              <1> %elifnum %1
    72                              <1> 	mov	al, %1
    73                              <1> %elifidni %1,al
    74                              <1> 	nop
    75                              <1> %elifidni %1,ah
    76                              <1> 	mov	al, ah
    77                              <1> %elifidni %1,bl
    78                              <1> 	mov	al, bl
    79                              <1> %elifidni %1,bh
    80                              <1> 	mov	al, bh
    81                              <1> %elifidni %1,cl
    82                              <1> 	mov	al, cl
    83                              <1> %elifidni %1,ch
    84                              <1> 	mov	al, ch
    85                              <1> %elifidni %1,dl
    86                              <1> 	mov	al, dl
    87                              <1> %elifidni %1,dh
    88                              <1> 	mov	al, dh
    89                              <1> %else
    90                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    91                              <1> %endif
    92                              <1> 	sub	esp, 2  ; reserve memory for buffer
    93                              <1> 	mov	edi, esp
    94                              <1> 	mov	[edi], al
    95                              <1> 	_syscall_write 1, edi, 1
    96                              <1> 	add	esp, 2
    97                              <1> 	popf
    98                              <1> 	popa
    99                              <1> %endmacro
   100                              <1> 
   101                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   102                              <1> %macro	GETCHAR 0
   103                              <1> 	pushf
   104                              <1> 	push	edi
   105                              <1> 	sub	esp, 2
   106                              <1> 	mov	edi, esp
   107                              <1> 	_syscall_read 0, edi, 1
   108                              <1> 	cmp	eax, 1
   109                              <1> 	jne	%%eof_reached
   110                              <1> 	xor	eax,eax
   111                              <1> 	mov	al, [edi]
   112                              <1> 	jmp	%%gcquit
   113                              <1> %%eof_reached:
   114                              <1> 	xor	eax, eax
   115                              <1> 	not	eax 		; eax := -1
   116                              <1> %%gcquit:
   117                              <1> 	add	esp, 2
   118                              <1> 	pop	edi
   119                              <1> 	popf
   120                              <1> %endmacro
   121                              <1> 
   122                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                              <1> %macro FINISH 0-1 0
   124                              <1> 	_syscall_exit %1
   125                              <1> %endmacro
   126                                  global _start
   127                                  
   128                                  section .text
   129                                  _start:
   130 00000000 BA00000000              	mov edx, 0
   131 00000005 B90A000000              	mov ecx, 10
   132 0000000A BB00000000              	mov ebx, 0
   133 0000000F B800000000              	mov eax, 0
   134 00000014 BE00000000              	mov esi, 0
   135 00000019 E81C000000              	call inputNumber
   136 0000001E 89C6                    	mov esi, eax
   137 00000020 E815000000              	call inputNumber
   138 00000025 01F0                    	add eax, esi
   139 00000027 BB00000000              	mov ebx, 0
   140 0000002C 50                      	push eax
   141 0000002D E890000000              	call outputNumber
   142 00000032 83C404                  	add esp, 4
   143 00000035 E9DB000000              	jmp _end
   144                                  	
   145                                  inputNumber:
   146 0000003A 55                      	push ebp
   147 0000003B 89E5                    	mov ebp, esp
   148 0000003D 83EC04                  	sub esp, 4
   149                                  
   150 00000040 60                      	pushad
   151                                  
   152                                  .while:
   153                                  	GETCHAR
   154 00000041 9C                  <1>  pushf
   155 00000042 57                  <1>  push edi
   156 00000043 83EC02              <1>  sub esp, 2
   157 00000046 89E7                <1>  mov edi, esp
   158                              <1>  _syscall_read 0, edi, 1
   159                              <2>  _syscall_3 3,%1,%2,%3
   160 00000048 52                  <3>  push edx
   161 00000049 51                  <3>  push ecx
   162 0000004A 53                  <3>  push ebx
   163 0000004B 6A03                <3>  push %1
   164 0000004D 6A00                <3>  push %2
   165 0000004F 57                  <3>  push %3
   166 00000050 6A01                <3>  push %4
   167 00000052 5A                  <3>  pop edx
   168 00000053 59                  <3>  pop ecx
   169 00000054 5B                  <3>  pop ebx
   170 00000055 58                  <3>  pop eax
   171 00000056 CD80                <3>  int 0x80
   172 00000058 5B                  <3>  pop ebx
   173 00000059 59                  <3>  pop ecx
   174 0000005A 5A                  <3>  pop edx
   175 0000005B 83F801              <1>  cmp eax, 1
   176 0000005E 7506                <1>  jne %%eof_reached
   177 00000060 31C0                <1>  xor eax,eax
   178 00000062 8A07                <1>  mov al, [edi]
   179 00000064 EB04                <1>  jmp %%gcquit
   180                              <1> %%eof_reached:
   181 00000066 31C0                <1>  xor eax, eax
   182 00000068 F7D0                <1>  not eax
   183                              <1> %%gcquit:
   184 0000006A 83C402              <1>  add esp, 2
   185 0000006D 5F                  <1>  pop edi
   186 0000006E 9D                  <1>  popf
   187 0000006F 83F80A                  	cmp eax, 10
   188 00000072 7421                    	je .return
   189 00000074 83F820                  	cmp eax, " "
   190 00000077 741C                    	je .return
   191 00000079 83F830                  	cmp eax, '0'
   192 0000007C 7C1F                    	jl .err
   193 0000007E 83F839                  	cmp eax, '9'
   194 00000081 7F1A                    	jg .err
   195 00000083 89C3                    	mov ebx, eax
   196 00000085 83EB30                  	sub ebx, '0'
   197 00000088 89D0                    	mov eax, edx
   198 0000008A F7E1                    	mul ecx
   199 0000008C 89C2                    	mov edx, eax
   200 0000008E 01DA                    	add edx, ebx
   201 00000090 8955FC                  	mov [ebp-4], edx
   202 00000093 EBAC                    	jmp .while
   203                                  .return:
   204 00000095 61                      	popad
   205 00000096 8B45FC                  	mov eax, [ebp-4]
   206                                  
   207 00000099 89EC                    	mov esp, ebp
   208 0000009B 5D                      	pop ebp
   209 0000009C C3                      	ret
   210                                  	
   211                                  .err:
   212                                  	PRINT "ERROR"
   213 0000009D 60                  <1>  pusha
   214 0000009E 9C                  <1>  pushf
   215 0000009F EB06                <1>  jmp %%astr
   216 000000A1 4552524F5200        <1> %%str db %1, 0
   217                              <1> %%strln equ $-%%str
   218                              <1> %%astr: _syscall_write 1, %%str, %%strln
   219                              <2> ..@5.astr: 
   220                              <2>  _syscall_3 4,%1,%2,%3
   221 000000A7 52                  <3>  push edx
   222 000000A8 51                  <3>  push ecx
   223 000000A9 53                  <3>  push ebx
   224 000000AA 6A04                <3>  push %1
   225 000000AC 6A01                <3>  push %2
   226 000000AE 68[A1000000]        <3>  push %3
   227 000000B3 6A06                <3>  push %4
   228 000000B5 5A                  <3>  pop edx
   229 000000B6 59                  <3>  pop ecx
   230 000000B7 5B                  <3>  pop ebx
   231 000000B8 58                  <3>  pop eax
   232 000000B9 CD80                <3>  int 0x80
   233 000000BB 5B                  <3>  pop ebx
   234 000000BC 59                  <3>  pop ecx
   235 000000BD 5A                  <3>  pop edx
   236 000000BE 9D                  <1>  popf
   237 000000BF 61                  <1>  popa
   238 000000C0 EB53                    	jmp _end
   239                                  
   240                                  outputNumber:
   241 000000C2 55                      	push ebp
   242 000000C3 89E5                    	mov ebp, esp
   243 000000C5 83EC08                  	sub esp, 8
   244                                  
   245 000000C8 60                      	pushad
   246                                  
   247 000000C9 8B4508                  	mov eax, [ebp+8]
   248 000000CC 89EE                    	mov esi, ebp
   249                                  
   250                                  .while:
   251 000000CE BA00000000              	mov edx, 0
   252 000000D3 F7F1                    	div ecx
   253 000000D5 4E                      	dec esi
   254 000000D6 8816                    	mov [esi], dl
   255 000000D8 83F800                  	cmp eax, 0
   256 000000DB 7402                    	je .print
   257                                  	
   258 000000DD EBEF                    	jmp .while
   259                                  
   260                                  .print:
   261 000000DF 39EE                    	cmp esi, ebp
   262 000000E1 7429                    	je .return
   263 000000E3 800630                  	add [esi], byte '0'
   264                                  	PUTCHAR byte [esi]
   265 000000E6 60                  <1>  pusha
   266 000000E7 9C                  <1>  pushf
   267                              <1> %ifstr %1
   268                              <1>  mov al, %1
   269                              <1> %elifnum %1
   270                              <1>  mov al, %1
   271                              <1> %elifidni %1,al
   272                              <1>  nop
   273                              <1> %elifidni %1,ah
   274                              <1>  mov al, ah
   275                              <1> %elifidni %1,bl
   276                              <1>  mov al, bl
   277                              <1> %elifidni %1,bh
   278                              <1>  mov al, bh
   279                              <1> %elifidni %1,cl
   280                              <1>  mov al, cl
   281                              <1> %elifidni %1,ch
   282                              <1>  mov al, ch
   283                              <1> %elifidni %1,dl
   284                              <1>  mov al, dl
   285                              <1> %elifidni %1,dh
   286                              <1>  mov al, dh
   287                              <1> %else
   288 000000E8 8A06                <1>  mov al, %1
   289                              <1> %endif
   290 000000EA 83EC02              <1>  sub esp, 2
   291 000000ED 89E7                <1>  mov edi, esp
   292 000000EF 8807                <1>  mov [edi], al
   293                              <1>  _syscall_write 1, edi, 1
   294                              <2>  _syscall_3 4,%1,%2,%3
   295 000000F1 52                  <3>  push edx
   296 000000F2 51                  <3>  push ecx
   297 000000F3 53                  <3>  push ebx
   298 000000F4 6A04                <3>  push %1
   299 000000F6 6A01                <3>  push %2
   300 000000F8 57                  <3>  push %3
   301 000000F9 6A01                <3>  push %4
   302 000000FB 5A                  <3>  pop edx
   303 000000FC 59                  <3>  pop ecx
   304 000000FD 5B                  <3>  pop ebx
   305 000000FE 58                  <3>  pop eax
   306 000000FF CD80                <3>  int 0x80
   307 00000101 5B                  <3>  pop ebx
   308 00000102 59                  <3>  pop ecx
   309 00000103 5A                  <3>  pop edx
   310 00000104 83C402              <1>  add esp, 2
   311 00000107 9D                  <1>  popf
   312 00000108 61                  <1>  popa
   313 00000109 46                      	inc esi
   314 0000010A EBD3                    	jmp .print
   315                                  
   316                                  .return:
   317 0000010C 61                      	popad
   318 0000010D 89EC                    	mov esp, ebp
   319 0000010F 5D                      	pop ebp
   320 00000110 C3                      	ret
   321                                  
   322                                  _enderr:
   323                                  
   324 00000111 61                      	popad
   325                                  
   326 00000112 89EC                    	mov esp, ebp
   327 00000114 5D                      	pop ebp
   328                                  _end:
   329                                  	PUTCHAR 10
   330 00000115 60                  <1>  pusha
   331 00000116 9C                  <1>  pushf
   332                              <1> %ifstr %1
   333                              <1>  mov al, %1
   334                              <1> %elifnum %1
   335 00000117 B00A                <1>  mov al, %1
   336                              <1> %elifidni %1,al
   337                              <1>  nop
   338                              <1> %elifidni %1,ah
   339                              <1>  mov al, ah
   340                              <1> %elifidni %1,bl
   341                              <1>  mov al, bl
   342                              <1> %elifidni %1,bh
   343                              <1>  mov al, bh
   344                              <1> %elifidni %1,cl
   345                              <1>  mov al, cl
   346                              <1> %elifidni %1,ch
   347                              <1>  mov al, ch
   348                              <1> %elifidni %1,dl
   349                              <1>  mov al, dl
   350                              <1> %elifidni %1,dh
   351                              <1>  mov al, dh
   352                              <1> %else
   353                              <1>  mov al, %1
   354                              <1> %endif
   355 00000119 83EC02              <1>  sub esp, 2
   356 0000011C 89E7                <1>  mov edi, esp
   357 0000011E 8807                <1>  mov [edi], al
   358                              <1>  _syscall_write 1, edi, 1
   359                              <2>  _syscall_3 4,%1,%2,%3
   360 00000120 52                  <3>  push edx
   361 00000121 51                  <3>  push ecx
   362 00000122 53                  <3>  push ebx
   363 00000123 6A04                <3>  push %1
   364 00000125 6A01                <3>  push %2
   365 00000127 57                  <3>  push %3
   366 00000128 6A01                <3>  push %4
   367 0000012A 5A                  <3>  pop edx
   368 0000012B 59                  <3>  pop ecx
   369 0000012C 5B                  <3>  pop ebx
   370 0000012D 58                  <3>  pop eax
   371 0000012E CD80                <3>  int 0x80
   372 00000130 5B                  <3>  pop ebx
   373 00000131 59                  <3>  pop ecx
   374 00000132 5A                  <3>  pop edx
   375 00000133 83C402              <1>  add esp, 2
   376 00000136 9D                  <1>  popf
   377 00000137 61                  <1>  popa
   378                                  	FINISH
   379                              <1>  _syscall_exit %1
   380 00000138 BB00000000          <2>  mov ebx, %1
   381 0000013D B801000000          <2>  mov eax, 1
   382 00000142 CD80                <2>  int 0x80
