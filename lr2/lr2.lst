     1                                  %include "stud_io.inc"
     2                              <1> ;; File stud_io.inc for Linux O.S.
     3                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     4                              <1> ;; I, the author, hereby grant everyone the right to use this
     5                              <1> ;; file for any purpose, in any manner, in it's original or
     6                              <1> ;; modified form, provided that any modified versions are
     7                              <1> ;; clearly marked as such.
     8                              <1> 
     9                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    10                              <1> ;; system dependend part
    11                              <1> 
    12                              <1> ; generic 3-param syscall
    13                              <1> %macro _syscall_3 4
    14                              <1> 	push edx
    15                              <1> 	push ecx
    16                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    17                              <1> 	push %1
    18                              <1> 	push %2
    19                              <1> 	push %3
    20                              <1> 	push %4
    21                              <1> 	pop edx
    22                              <1> 	pop ecx
    23                              <1> 	pop ebx
    24                              <1> 	pop eax 
    25                              <1> 	int 0x80
    26                              <1> 	pop ebx
    27                              <1> 	pop ecx
    28                              <1> 	pop edx
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    32                              <1> %macro _syscall_exit 1
    33                              <1> 	mov ebx, %1	; exit code
    34                              <1> 	mov eax, 1	; 1 = sys_exit
    35                              <1> 	int 0x80
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;; system dependent part ends here
    39                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    40                              <1> 
    41                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    42                              <1> ; output: eax: read bytes
    43                              <1> %macro _syscall_read 3
    44                              <1> 	_syscall_3 3,%1,%2,%3
    45                              <1> %endmacro
    46                              <1> 
    47                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    48                              <1> ; output: eax: written bytes
    49                              <1> %macro _syscall_write 3
    50                              <1> 	_syscall_3 4,%1,%2,%3
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    54                              <1> %macro 	PRINT 1
    55                              <1> 	pusha
    56                              <1> 	pushf
    57                              <1> 	jmp %%astr
    58                              <1> %%str	db	%1, 0
    59                              <1> %%strln	equ	$-%%str
    60                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    61                              <1> 	popf
    62                              <1> 	popa
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    66                              <1> %macro	PUTCHAR 1
    67                              <1> 	pusha
    68                              <1> 	pushf
    69                              <1> %ifstr %1
    70                              <1> 	mov	al, %1
    71                              <1> %elifnum %1
    72                              <1> 	mov	al, %1
    73                              <1> %elifidni %1,al
    74                              <1> 	nop
    75                              <1> %elifidni %1,ah
    76                              <1> 	mov	al, ah
    77                              <1> %elifidni %1,bl
    78                              <1> 	mov	al, bl
    79                              <1> %elifidni %1,bh
    80                              <1> 	mov	al, bh
    81                              <1> %elifidni %1,cl
    82                              <1> 	mov	al, cl
    83                              <1> %elifidni %1,ch
    84                              <1> 	mov	al, ch
    85                              <1> %elifidni %1,dl
    86                              <1> 	mov	al, dl
    87                              <1> %elifidni %1,dh
    88                              <1> 	mov	al, dh
    89                              <1> %else
    90                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    91                              <1> %endif
    92                              <1> 	sub	esp, 2  ; reserve memory for buffer
    93                              <1> 	mov	edi, esp
    94                              <1> 	mov	[edi], al
    95                              <1> 	_syscall_write 1, edi, 1
    96                              <1> 	add	esp, 2
    97                              <1> 	popf
    98                              <1> 	popa
    99                              <1> %endmacro
   100                              <1> 
   101                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   102                              <1> %macro	GETCHAR 0
   103                              <1> 	pushf
   104                              <1> 	push	edi
   105                              <1> 	sub	esp, 2
   106                              <1> 	mov	edi, esp
   107                              <1> 	_syscall_read 0, edi, 1
   108                              <1> 	cmp	eax, 1
   109                              <1> 	jne	%%eof_reached
   110                              <1> 	xor	eax,eax
   111                              <1> 	mov	al, [edi]
   112                              <1> 	jmp	%%gcquit
   113                              <1> %%eof_reached:
   114                              <1> 	xor	eax, eax
   115                              <1> 	not	eax 		; eax := -1
   116                              <1> %%gcquit:
   117                              <1> 	add	esp, 2
   118                              <1> 	pop	edi
   119                              <1> 	popf
   120                              <1> %endmacro
   121                              <1> 
   122                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                              <1> %macro FINISH 0-1 0
   124                              <1> 	_syscall_exit %1
   125                              <1> %endmacro
   126                                  global _start
   127                                  
   128                                  section .bss
   129 00000000 <res 0000000A>          	result resb 10
   130                                  	resultlen equ $-result
   131                                  
   132                                  section .text
   133                                  _start:
   134 00000000 BA00000000              	mov edx, 0
   135 00000005 B90A000000              	mov ecx, 10
   136 0000000A BB00000000              	mov ebx, 0
   137 0000000F B800000000              	mov eax, 0
   138 00000014 BE00000000              	mov esi, 0
   139                                  
   140                                  _mark:
   141                                  	GETCHAR
   142 00000019 9C                  <1>  pushf
   143 0000001A 57                  <1>  push edi
   144 0000001B 83EC02              <1>  sub esp, 2
   145 0000001E 89E7                <1>  mov edi, esp
   146                              <1>  _syscall_read 0, edi, 1
   147                              <2>  _syscall_3 3,%1,%2,%3
   148 00000020 52                  <3>  push edx
   149 00000021 51                  <3>  push ecx
   150 00000022 53                  <3>  push ebx
   151 00000023 6A03                <3>  push %1
   152 00000025 6A00                <3>  push %2
   153 00000027 57                  <3>  push %3
   154 00000028 6A01                <3>  push %4
   155 0000002A 5A                  <3>  pop edx
   156 0000002B 59                  <3>  pop ecx
   157 0000002C 5B                  <3>  pop ebx
   158 0000002D 58                  <3>  pop eax
   159 0000002E CD80                <3>  int 0x80
   160 00000030 5B                  <3>  pop ebx
   161 00000031 59                  <3>  pop ecx
   162 00000032 5A                  <3>  pop edx
   163 00000033 83F801              <1>  cmp eax, 1
   164 00000036 7506                <1>  jne %%eof_reached
   165 00000038 31C0                <1>  xor eax,eax
   166 0000003A 8A07                <1>  mov al, [edi]
   167 0000003C EB04                <1>  jmp %%gcquit
   168                              <1> %%eof_reached:
   169 0000003E 31C0                <1>  xor eax, eax
   170 00000040 F7D0                <1>  not eax
   171                              <1> %%gcquit:
   172 00000042 83C402              <1>  add esp, 2
   173 00000045 5F                  <1>  pop edi
   174 00000046 9D                  <1>  popf
   175 00000047 83F80A                  	cmp eax, 10; 10 - enter code
   176 0000004A 744C                    	je _addition
   177 0000004C 83F820                  	cmp eax, " "
   178 0000004F 743E                    	je _copy
   179 00000051 83F830                  	cmp eax, '0'
   180 00000054 7C14                    	jl _err
   181 00000056 83F839                  	cmp eax, '9'
   182 00000059 7F0F                    	jg _err
   183 0000005B 89C3                    	mov ebx, eax
   184 0000005D 83EB30                  	sub ebx, '0'
   185 00000060 89D0                    	mov eax, edx
   186 00000062 F7E1                    	mul ecx
   187 00000064 89C2                    	mov edx, eax
   188 00000066 01DA                    	add edx, ebx
   189 00000068 EBAF                    	jmp _mark
   190                                  
   191                                  _err:
   192                                  	PRINT "ERROR"
   193 0000006A 60                  <1>  pusha
   194 0000006B 9C                  <1>  pushf
   195 0000006C EB06                <1>  jmp %%astr
   196 0000006E 4552524F5200        <1> %%str db %1, 0
   197                              <1> %%strln equ $-%%str
   198                              <1> %%astr: _syscall_write 1, %%str, %%strln
   199                              <2> ..@6.astr: 
   200                              <2>  _syscall_3 4,%1,%2,%3
   201 00000074 52                  <3>  push edx
   202 00000075 51                  <3>  push ecx
   203 00000076 53                  <3>  push ebx
   204 00000077 6A04                <3>  push %1
   205 00000079 6A01                <3>  push %2
   206 0000007B 68[6E000000]        <3>  push %3
   207 00000080 6A06                <3>  push %4
   208 00000082 5A                  <3>  pop edx
   209 00000083 59                  <3>  pop ecx
   210 00000084 5B                  <3>  pop ebx
   211 00000085 58                  <3>  pop eax
   212 00000086 CD80                <3>  int 0x80
   213 00000088 5B                  <3>  pop ebx
   214 00000089 59                  <3>  pop ecx
   215 0000008A 5A                  <3>  pop edx
   216 0000008B 9D                  <1>  popf
   217 0000008C 61                  <1>  popa
   218 0000008D EB5F                    	jmp _end
   219                                  
   220                                  _copy:
   221 0000008F 89D6                    	mov esi, edx
   222 00000091 BA00000000              	mov edx, 0
   223 00000096 EB81                    	jmp _mark
   224                                  
   225                                  _addition:
   226 00000098 01D6                    	add esi, edx
   227 0000009A 89F0                    	mov eax, esi
   228 0000009C BB00000000              	mov ebx, 0
   229 000000A1 EB00                    	jmp _calc
   230                                  
   231                                  _calc:
   232 000000A3 BA00000000              	mov edx, 0
   233 000000A8 F7F1                    	div ecx
   234 000000AA 8993[00000000]          	mov [result + ebx], edx
   235 000000B0 83F800                  	cmp eax, 0
   236 000000B3 7403                    	je _print
   237                                  	;cmp ebx, resultlen - 1
   238                                  	;jz _print
   239 000000B5 43                      	inc ebx
   240 000000B6 EBEB                    	jmp _calc
   241                                  
   242                                  _print:
   243                                  	;mov al, [result + ebx]
   244 000000B8 8083[00000000]30        	add byte [result + ebx], '0'
   245                                  	PUTCHAR byte [result + ebx]
   246 000000BF 60                  <1>  pusha
   247 000000C0 9C                  <1>  pushf
   248                              <1> %ifstr %1
   249                              <1>  mov al, %1
   250                              <1> %elifnum %1
   251                              <1>  mov al, %1
   252                              <1> %elifidni %1,al
   253                              <1>  nop
   254                              <1> %elifidni %1,ah
   255                              <1>  mov al, ah
   256                              <1> %elifidni %1,bl
   257                              <1>  mov al, bl
   258                              <1> %elifidni %1,bh
   259                              <1>  mov al, bh
   260                              <1> %elifidni %1,cl
   261                              <1>  mov al, cl
   262                              <1> %elifidni %1,ch
   263                              <1>  mov al, ch
   264                              <1> %elifidni %1,dl
   265                              <1>  mov al, dl
   266                              <1> %elifidni %1,dh
   267                              <1>  mov al, dh
   268                              <1> %else
   269 000000C1 8A83[00000000]      <1>  mov al, %1
   270                              <1> %endif
   271 000000C7 83EC02              <1>  sub esp, 2
   272 000000CA 89E7                <1>  mov edi, esp
   273 000000CC 8807                <1>  mov [edi], al
   274                              <1>  _syscall_write 1, edi, 1
   275                              <2>  _syscall_3 4,%1,%2,%3
   276 000000CE 52                  <3>  push edx
   277 000000CF 51                  <3>  push ecx
   278 000000D0 53                  <3>  push ebx
   279 000000D1 6A04                <3>  push %1
   280 000000D3 6A01                <3>  push %2
   281 000000D5 57                  <3>  push %3
   282 000000D6 6A01                <3>  push %4
   283 000000D8 5A                  <3>  pop edx
   284 000000D9 59                  <3>  pop ecx
   285 000000DA 5B                  <3>  pop ebx
   286 000000DB 58                  <3>  pop eax
   287 000000DC CD80                <3>  int 0x80
   288 000000DE 5B                  <3>  pop ebx
   289 000000DF 59                  <3>  pop ecx
   290 000000E0 5A                  <3>  pop edx
   291 000000E1 83C402              <1>  add esp, 2
   292 000000E4 9D                  <1>  popf
   293 000000E5 61                  <1>  popa
   294 000000E6 83FB00                  	cmp ebx, 0
   295 000000E9 7403                    	je _end
   296 000000EB 4B                      	dec ebx
   297 000000EC EBCA                    	jmp _print
   298                                  
   299                                  _end:
   300                                  	PUTCHAR 10
   301 000000EE 60                  <1>  pusha
   302 000000EF 9C                  <1>  pushf
   303                              <1> %ifstr %1
   304                              <1>  mov al, %1
   305                              <1> %elifnum %1
   306 000000F0 B00A                <1>  mov al, %1
   307                              <1> %elifidni %1,al
   308                              <1>  nop
   309                              <1> %elifidni %1,ah
   310                              <1>  mov al, ah
   311                              <1> %elifidni %1,bl
   312                              <1>  mov al, bl
   313                              <1> %elifidni %1,bh
   314                              <1>  mov al, bh
   315                              <1> %elifidni %1,cl
   316                              <1>  mov al, cl
   317                              <1> %elifidni %1,ch
   318                              <1>  mov al, ch
   319                              <1> %elifidni %1,dl
   320                              <1>  mov al, dl
   321                              <1> %elifidni %1,dh
   322                              <1>  mov al, dh
   323                              <1> %else
   324                              <1>  mov al, %1
   325                              <1> %endif
   326 000000F2 83EC02              <1>  sub esp, 2
   327 000000F5 89E7                <1>  mov edi, esp
   328 000000F7 8807                <1>  mov [edi], al
   329                              <1>  _syscall_write 1, edi, 1
   330                              <2>  _syscall_3 4,%1,%2,%3
   331 000000F9 52                  <3>  push edx
   332 000000FA 51                  <3>  push ecx
   333 000000FB 53                  <3>  push ebx
   334 000000FC 6A04                <3>  push %1
   335 000000FE 6A01                <3>  push %2
   336 00000100 57                  <3>  push %3
   337 00000101 6A01                <3>  push %4
   338 00000103 5A                  <3>  pop edx
   339 00000104 59                  <3>  pop ecx
   340 00000105 5B                  <3>  pop ebx
   341 00000106 58                  <3>  pop eax
   342 00000107 CD80                <3>  int 0x80
   343 00000109 5B                  <3>  pop ebx
   344 0000010A 59                  <3>  pop ecx
   345 0000010B 5A                  <3>  pop edx
   346 0000010C 83C402              <1>  add esp, 2
   347 0000010F 9D                  <1>  popf
   348 00000110 61                  <1>  popa
   349                                  	FINISH
   350                              <1>  _syscall_exit %1
   351 00000111 BB00000000          <2>  mov ebx, %1
   352 00000116 B801000000          <2>  mov eax, 1
   353 0000011B CD80                <2>  int 0x80
