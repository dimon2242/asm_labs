     1                                  global outputNumber
     2                                  
     3                                  EXTERN putChar
     4                                  
     5                                  section .data
     6 00000000 2D000000                	minus dd '-'
     7 00000004 2E000000                	dot dd '.'
     8 00000008 0A000000                	ent dd 10
     9                                  
    10                                  outputNumber:
    11 0000000C 55                      	push ebp
    12 0000000D 89E5                    	mov ebp, esp
    13 0000000F 83EC1C                  	sub esp, 28 ; 0-8 for symbols;
    14                                  	;;; 1 root: 8-12 dig; 12-16 - frac
    15                                  	;;; 2 root: 16-20 dig; 20-24 - frac
    16                                  	;;; ebx - counter
    17                                  	;;; 24-28 - other
    18 00000012 60                      	pushad
    19 00000013 9C                      	pushfd
    20                                  
    21 00000014 B90A000000              	mov ecx, 10
    22                                  	;mov word [ebp-26], 0
    23                                  	;inc word [ebp-26]
    24 00000019 89EE                    	mov esi, ebp
    25 0000001B C74500E8030000          	mov dword [ebp], 1000
    26                                  
    27                                  
    28 00000022 83EC02                  	sub esp, 2
    29 00000025 9BD93C24                	fstcw [esp]
    30 00000029 66810C24000C            	or word [esp], 0000110000000000b
    31 0000002F D92C24                  	fldcw [esp]
    32 00000032 83C402                  	add esp, 2
    33                                  
    34 00000035 C745E4E8030000          	mov [ebp-28], dword 1000
    35                                  
    36                                  
    37 0000003C BF00000000              	mov edi, 0
    38 00000041 8D5DF0                  	lea ebx, [ebp-16]
    39                                  .outputReal:
    40 00000044 47                      	inc edi
    41                                  ;;;;;;
    42 00000045 D944BD04                	fld dword [ebp+4+edi*4]
    43 00000049 D9E4                    	ftst
    44 0000004B 9BDFE0                  	fstsw ax
    45 0000004E 9E                      	sahf
    46 0000004F DB5304                  	fist dword [ebx+4] ; dig of first root
    47 00000052 DB4304                  	fild dword [ebx+4] ; too
    48 00000055 DEE9                    	fsubp st1
    49 00000057 DB45E4                  	fild dword [ebp-28]
    50 0000005A D9C9                    	fxch st1
    51 0000005C D8C9                    	fmul st1
    52                                  	
    53 0000005E DB1B                    	fistp dword [ebx] ; fraction of first root
    54 00000060 D9C9                    	fxch ; change pos 1000 and next root
    55                                  
    56                                  ;;;;;;
    57 00000062 8B4304                  	mov eax, [ebx+4]
    58 00000065 731A                    	jae short .while
    59 00000067 8B03                    	mov eax, [ebx]
    60 00000069 F7D8                    	neg eax
    61 0000006B 8903                    	mov dword [ebx], eax
    62 0000006D 8B4304                  	mov eax, [ebx+4]
    63                                  
    64 00000070 F7D8                    	neg eax
    65 00000072 68[00000000]            	push minus
    66 00000077 E8(00000000)            	call putChar
    67 0000007C 83C404                  	add esp, 4
    68 0000007F EB00                    	jmp short .while
    69                                  
    70                                  .while:
    71 00000081 31D2                    	xor edx, edx
    72 00000083 F7F1                    	div ecx
    73 00000085 4E                      	dec esi
    74 00000086 8816                    	mov [esi], dl
    75 00000088 85C0                    	test eax, eax
    76 0000008A 7402                    	je short .print
    77 0000008C EBF3                    	jmp short .while
    78                                  
    79                                  
    80                                  .print:
    81 0000008E 39EE                    	cmp esi, ebp
    82 00000090 740F                    	je .outputFrac
    83 00000092 800630                  	add [esi], byte '0'
    84 00000095 56                      	push esi
    85 00000096 E8(00000000)            	call putChar
    86 0000009B 83C404                  	add esp, 4
    87 0000009E 46                      	inc esi
    88 0000009F EBED                    	jmp short .print
    89                                  
    90                                  .outputFrac:
    91 000000A1 68[04000000]            	push dot
    92 000000A6 E8(00000000)            	call putChar
    93 000000AB 83C404                  	add esp, 4
    94 000000AE 89EE                    	mov esi, ebp
    95 000000B0 8B03                    	mov eax, [ebx]
    96 000000B2 57                      	push edi
    97 000000B3 31FF                    	xor edi, edi
    98                                  
    99                                  .whileFrac:
   100 000000B5 47                      	inc edi
   101 000000B6 31D2                    	xor edx, edx
   102 000000B8 F7F1                    	div ecx
   103 000000BA 4E                      	dec esi
   104 000000BB 8816                    	mov [esi], dl
   105 000000BD 83FF03                  	cmp edi, 3
   106 000000C0 7402                    	je short .printFrac
   107 000000C2 EBF1                    	jmp short .whileFrac
   108                                  
   109                                  .printFrac:
   110 000000C4 39EE                    	cmp esi, ebp
   111 000000C6 740F                    	je .retFrac
   112 000000C8 800630                  	add [esi], byte '0'
   113 000000CB 56                      	push esi
   114 000000CC E8(00000000)            	call putChar
   115 000000D1 83C404                  	add esp, 4
   116 000000D4 46                      	inc esi
   117 000000D5 EBED                    	jmp short .printFrac
   118                                  
   119                                  
   120                                  .retFrac:
   121 000000D7 5F                      	pop edi
   122 000000D8 83FF02                  	cmp edi, 2
   123 000000DB 741A                    	jz .return
   124                                  
   125 000000DD B80A000000              	mov eax, 10
   126 000000E2 68[08000000]            	push ent
   127 000000E7 E8(00000000)            	call putChar
   128 000000EC 83C404                  	add esp, 4
   129                                  
   130 000000EF 83EB08                  	sub ebx, 8
   131 000000F2 E94DFFFFFF              	jmp .outputReal
   132                                  
   133                                  
   134                                  
   135                                  .return:
   136 000000F7 9D                      	popfd
   137 000000F8 61                      	popad
   138                                  
   139 000000F9 89EC                    	mov esp, ebp
   140 000000FB 5D                      	pop ebp
   141 000000FC C3                      	ret
