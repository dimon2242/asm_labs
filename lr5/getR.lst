     1                                  
     2                                  GLOBAL inputNumber
     3                                  
     4                                  EXTERN getChar
     5                                  EXTERN finish
     6                                  EXTERN outputNumber
     7                                  
     8                                  section .data
     9 00000000 4552524F52              	err_msg db "ERROR"
    10                                  	len equ $-err_msg
    11                                  
    12                                  inputNumber:
    13 00000005 55                      	push ebp
    14 00000006 89E5                    	mov ebp, esp
    15 00000008 83EC10                  	sub esp, 16 ; 1) знак; 2) порядок с десяткой; 3) целая часть; 4) дробная часть;
    16                                  
    17 0000000B 53                      	push ebx
    18 0000000C 51                      	push ecx
    19 0000000D 52                      	push edx
    20 0000000E 56                      	push esi
    21 0000000F 9C                      	pushfd
    22                                  
    23 00000010 31D2                    	xor edx, edx
    24 00000012 B90A000000              	mov ecx, 10
    25 00000017 31DB                    	xor ebx, ebx
    26 00000019 31C0                    	xor eax, eax
    27                                  
    28 0000001B C745F80A000000          	mov dword [ebp-8], 10
    29                                  
    30 00000022 C745FC01000000          	mov dword [ebp-4], 1 ; Для положительного числа (смещение 4)
    31                                  
    32                                  .while:
    33                                  
    34 00000029 E8(00000000)            	call getChar
    35                                  
    36 0000002E 83F80A                  	cmp eax, 10
    37 00000031 0F8483000000            	je .return
    38 00000037 83F820                  	cmp eax, " "
    39 0000003A 747E                    	je .return
    40 0000003C 83F82B                  	cmp eax, '+'
    41 0000003F 74E8                    	jz short .while
    42 00000041 83F82D                  	cmp eax, "-"
    43 00000044 7505                    	jnz short .afterNegative
    44 00000046 F75DFC                  	neg dword [ebp-4]
    45 00000049 EBDE                    	jmp .while
    46                                  
    47                                  .afterNegative:
    48 0000004B 83F82E                  	cmp eax, "."
    49 0000004E 741C                    	jz .frac ; Если дошли до точки
    50 00000050 83F830                  	cmp eax, '0'
    51 00000053 7C74                    	jl .err
    52 00000055 83F839                  	cmp eax, '9'
    53 00000058 7F6F                    	jg .err
    54 0000005A 89C3                    	mov ebx, eax
    55 0000005C 83EB30                  	sub ebx, '0'
    56 0000005F 89D0                    	mov eax, edx
    57 00000061 F7E1                    	mul ecx
    58 00000063 89C2                    	mov edx, eax
    59 00000065 01DA                    	add edx, ebx
    60 00000067 8955F4                  	mov [ebp-12], edx
    61 0000006A EBBD                    	jmp .while
    62                                  
    63                                  .frac:
    64 0000006C 31F6                    	xor esi, esi
    65 0000006E 31D2                    	xor edx, edx
    66 00000070 31DB                    	xor ebx, ebx
    67                                  .whileFrac:
    68 00000072 E8(00000000)            	call getChar
    69 00000077 83F80A                  	cmp eax, 10
    70 0000007A 7422                    	je .prepareFrac
    71 0000007C 83F820                  	cmp eax, " "
    72 0000007F 741D                    	je .prepareFrac
    73 00000081 83F830                  	cmp eax, '0'
    74 00000084 7C43                    	jl .err
    75 00000086 83F839                  	cmp eax, '9'
    76 00000089 7F3E                    	jg .err
    77 0000008B 46                      	inc esi
    78                                  
    79 0000008C 89C3                    	mov ebx, eax
    80 0000008E 83EB30                  	sub ebx, '0'
    81 00000091 89D0                    	mov eax, edx
    82 00000093 F7E1                    	mul ecx
    83 00000095 89C2                    	mov edx, eax
    84 00000097 01DA                    	add edx, ebx
    85 00000099 8955F0                  	mov [ebp-16], edx
    86                                  
    87 0000009C EBD4                    	jmp .whileFrac
    88                                  
    89                                  .prepareFrac:
    90 0000009E 9BDBE3                  	finit
    91 000000A1 DB45F8                  	fild dword [ebp-8]
    92 000000A4 DB45F4                  	fild dword [ebp-12]
    93 000000A7 DB45F0                  	fild dword [ebp-16]
    94                                  .whileLoc:
    95                                  	
    96 000000AA 85F6                    	test esi, esi
    97 000000AC 7405                    	jz .endDiv
    98                                  
    99 000000AE D8F2                    	fdiv st2
   100 000000B0 4E                      	dec esi
   101 000000B1 EBF7                    	jmp .whileLoc
   102                                  
   103                                  .endDiv:
   104 000000B3 D8C1                    	fadd st1
   105 000000B5 DB55F4                  	fist dword [ebp-12]
   106 000000B8 EB00                    	jmp .return
   107                                  
   108                                  .return:
   109 000000BA 8B45F4                  	mov eax, [ebp-12]
   110 000000BD F76DFC                  	imul dword [ebp-4]
   111                                  	;mov dword [ebp-4], 1
   112                                  
   113 000000C0 9D                      	popfd
   114 000000C1 5E                      	pop esi
   115 000000C2 5A                      	pop edx
   116 000000C3 59                      	pop ecx
   117 000000C4 5B                      	pop ebx
   118                                  
   119 000000C5 89EC                    	mov esp, ebp
   120 000000C7 5D                      	pop ebp
   121                                  	
   122 000000C8 C3                      	ret
   123                                  
   124                                  .err:
   125 000000C9 B804000000              	mov eax, 4
   126 000000CE BB01000000              	mov ebx, 1
   127 000000D3 B9[00000000]            	mov ecx, err_msg
   128 000000D8 BA05000000              	mov edx, len
   129 000000DD CD80                    	int 80h
   130 000000DF E8(00000000)            	call finish
